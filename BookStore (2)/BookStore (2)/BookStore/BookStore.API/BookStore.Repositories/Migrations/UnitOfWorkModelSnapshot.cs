// <auto-generated />
using System;
using BookStore.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BookStore.Repositories.Migrations
{
    [DbContext(typeof(UnitOfWork))]
    partial class UnitOfWorkModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "English_India.1252")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BookStore.Models.Data.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('books_id_seq'::regclass)");

                    b.Property<string>("Base64image")
                        .HasColumnType("text")
                        .HasColumnName("base64image");

                    b.Property<int>("Categoryid")
                        .HasColumnType("integer")
                        .HasColumnName("categoryid");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.Property<int>("PublisherId")
                        .HasColumnType("integer")
                        .HasColumnName("publisherid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("Categoryid");

                    b.HasIndex("PublisherId");

                    b.ToTable("book");
                });

            modelBuilder.Entity("BookStore.Models.Data.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('cart_id_seq'::regclass)");

                    b.Property<int>("BookId")
                        .HasColumnType("integer")
                        .HasColumnName("bookid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("cart");
                });

            modelBuilder.Entity("BookStore.Models.Data.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('categories_id_seq'::regclass)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("category");
                });

            modelBuilder.Entity("BookStore.Models.Data.OrderDtl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('orderdtl_id_seq::regclass')");

                    b.Property<int>("BookId")
                        .HasColumnType("integer")
                        .HasColumnName("bookid");

                    b.Property<int>("OrderMstId")
                        .HasColumnType("integer")
                        .HasColumnName("ordermstid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("totalprice");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderMstId");

                    b.ToTable("orderdtl");
                });

            modelBuilder.Entity("BookStore.Models.Data.OrderMst", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('ordermst_id_seq'::regclass)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("orderdate");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("totalprice");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ordermst");
                });

            modelBuilder.Entity("BookStore.Models.Data.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('publisher_id_seq::regclass')");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Contact")
                        .HasColumnType("text")
                        .HasColumnName("contact");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("publisher");
                });

            modelBuilder.Entity("BookStore.Models.Data.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('roles_id_seq'::regclass)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("role");
                });

            modelBuilder.Entity("BookStore.Models.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('users_id_seq'::regclass)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password");

                    b.Property<int>("Roleid")
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.HasKey("Id");

                    b.HasIndex("Roleid");

                    b.ToTable("user");
                });

            modelBuilder.Entity("BookStore.Models.Data.Book", b =>
                {
                    b.HasOne("BookStore.Models.Data.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("Categoryid")
                        .HasConstraintName("fk_category")
                        .IsRequired();

                    b.HasOne("BookStore.Models.Data.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .HasConstraintName("fk_publisher")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("BookStore.Models.Data.Cart", b =>
                {
                    b.HasOne("BookStore.Models.Data.Book", "Book")
                        .WithMany("Carts")
                        .HasForeignKey("BookId")
                        .HasConstraintName("fk_book")
                        .IsRequired();

                    b.HasOne("BookStore.Models.Data.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user")
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookStore.Models.Data.OrderDtl", b =>
                {
                    b.HasOne("BookStore.Models.Data.Book", "Book")
                        .WithMany("OrderDtls")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.Models.Data.OrderMst", "OrderMst")
                        .WithMany("OrderDtls")
                        .HasForeignKey("OrderMstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("OrderMst");
                });

            modelBuilder.Entity("BookStore.Models.Data.OrderMst", b =>
                {
                    b.HasOne("BookStore.Models.Data.User", "User")
                        .WithMany("OrderMsts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookStore.Models.Data.User", b =>
                {
                    b.HasOne("BookStore.Models.Data.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("Roleid")
                        .HasConstraintName("fk_role")
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BookStore.Models.Data.Book", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderDtls");
                });

            modelBuilder.Entity("BookStore.Models.Data.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookStore.Models.Data.OrderMst", b =>
                {
                    b.Navigation("OrderDtls");
                });

            modelBuilder.Entity("BookStore.Models.Data.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookStore.Models.Data.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BookStore.Models.Data.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderMsts");
                });
#pragma warning restore 612, 618
        }
    }
}
